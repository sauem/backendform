<?php


namespace usvn\controllers;


use common\helper\HelperFunction;
use common\models\Contact;
use common\models\Orders;
use common\models\Poll;
use yii\base\BaseObject;
use yii\web\BadRequestHttpException;
use yii\web\Response;

class AjaxController extends BaseController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        \Yii::$app->response->format = Response::FORMAT_JSON;
    }

    /**
     * @return bool
     * @throws BadRequestHttpException
     */
    function actionCreateBrief()
    {
        $contact = new Contact();
        if (\Yii::$app->request->isPost) {
            try {
                if ($contact->load(\Yii::$app->request->post())) {
                    if (!$contact->save()) {
                        throw new BadRequestHttpException(HelperFunction::firstError($contact));
                    }
                    return true;
                }
            } catch (\Exception $exception) {
                throw new BadRequestHttpException($exception->getMessage());
            }
        }
        return \Yii::$app->request->post();
    }

    function actionCreateOrder()
    {
        $post = \Yii::$app->request->post();
        $model = new Orders();
        if ($model->load($post, '') && $model->save()) {

        }
    }

    function actionAddPoll()
    {
        if (\Yii::$app->request->isPost) {
            try {
                $ids = \Yii::$app->request->post('ids');
                if (empty($ids)) {
                    throw new BadRequestHttpException("You need chose one!");
                }
                $poll = Poll::findOne(['ip' => \Yii::$app->request->getRemoteIP()]);
                if ($poll) {
                    throw new BadRequestHttpException("You have voted!");
                }
                foreach ($ids as $id) {
                    $poll = new Poll();
                    $poll->ip = \Yii::$app->request->getRemoteIP();
                    $poll->product_id = (int)$id;
                    if (!$poll->save()) {
                        throw new BadRequestHttpException(HelperFunction::firstError($poll));
                    }
                }
                return true;
            } catch (\Exception $exception) {
                return [
                    'success' => 1,
                    'msg' => $exception->getMessage()
                ];
            }
        }
    }
}
