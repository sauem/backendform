@section('js_pos')
    <script type="text/babel">
        const App = () => {
            const initialState = {
                modalTitle: '',
                modalVisible: false,
                members: [],
                pagination: {},
                uploading: false,
                loading: false,
                searchValue: ''
            }
            const [state, setState] = useState(initialState);
            const [defaultFileList, setDefaultFileList] = useState([]);
            const [progress, setProgress] = useState(0);
            const [form] = Form.useForm();

            const onUpload = options => {
                const {onSuccess, onError, file, onProgress} = options;
                setState({
                    ...state,
                    ...{
                        uploading: true
                    }
                });
                onUploadMedia(file, data => {
                    form.setFieldsValue({
                        media_id: data.id
                    })
                    onSuccess();
                }, onError, (event) => {
                    const percent = Math.floor((event.loaded / event.total) * 100);
                    setProgress(percent);
                    if (percent === 100) {
                        setTimeout(() => setProgress(0), 1000);
                    }
                    onProgress({percent: (event.loaded / event.total) * 100});
                });
            }
            const handleOnChange = ({file, fileList, event}) => {
                setDefaultFileList(fileList);
            };
            const onUpdate = member => {
                form.setFieldsValue(member);

                member.avatar ? setDefaultFileList([{
                    uid: '-1',
                    name: member.name,
                    status: 'done',
                    url: member.avatar
                }]) : setDefaultFileList([]);
            }
            const onDelete = async (id) => {
                await Members.delete(id);
                await getMember();
            }
            const onSubmit = async (data) => {
                if (typeof data.id !== "undefined") {
                    await Members.update(data);
                } else {
                    await Members.create(data);
                }
                await getMember({loading: false});
                form.resetFields();
            }
            const getMember = async (params) => {
                try {
                    const {data, pagination} = await Members.fetch(params);
                    setState({
                        ...state,
                        ...{
                            members: data,
                            pagination: pagination
                        }
                    })
                } catch (e) {
                    message.error(e.message);
                }
            }
            useEffect(() => {
                getMember();
            }, []);
            return (
                <Row gutter={[8, 8]}>
                    <Col md={16}>
                        <Card title="Danh sách thành viên">
                            <Table
                                dataSource={state.members}
                                pagination={state.pagination}
                                columns={[
                                    {title: 'Tên thành viên', dataIndex: 'name', key: 'name'},
                                    {title: 'Giới thiệu', dataIndex: 'description', key: 'description'},
                                    {
                                        title: 'Hành động', key: 'action', render: raw => {
                                            return (
                                        <div>
                                        <Button onClick={() => onUpdate(raw)} type="primary"
                                        className={`mr-1`} size={`small`}><i
                                        className="icon icon-edit"/></Button>
                                        <Popconfirm
                                        title="Xóa nhận xét hiện tại"
                                        onConfirm={() => onDelete(raw.id)}
                                        okText="Xóa"
                                        cancelText="Hủy"
                                        >
                                        <Button type="dashed" danger size={`small`}><i
                                        className="icon icon-trash"/></Button>
                                        </Popconfirm>
                                        </div>
                                        )
                                        }
                                    },
                                ]}
                            />
                        </Card>
                    </Col>
                    <Col md={8}>
                        <Card title="Thêm thành viên mới">
                            <Form layout={`vertical`} onFinish={onSubmit} form={form} id={'memberForm'}>
                                <Form.Item name={'id'} hidden><Input/></Form.Item>
                                <Form.Item name={'media_id'} hidden><Input/></Form.Item>
                                <Form.Item
                                    name={'name'}
                                    label={`Tên thành viên`}
                                    rules={[{required: true, message: 'Danh mục bắt buộc!'}]}
                                >
                                    <Input/>
                                </Form.Item>

                                <Form.Item
                                    name={'description'}
                                    label={`Mô tả`}
                                >
                                    <Input.TextArea/>
                                </Form.Item>
                                <Form.Item
                                    name={'facbook'}
                                    label={`Facebook`}
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item
                                    name={'instagram'}
                                    label={`Instagram`}
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item
                                    name={'linkedin'}
                                    label={`LinkedIn`}
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item
                                    name={'twitter'}
                                    label={`Twitter`}
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item>

                                    <Upload
                                        accept="image/*"
                                        customRequest={onUpload}
                                        onChange={handleOnChange}
                                        listType="picture-card"
                                        fileList={defaultFileList}
                                        className="avatar-uploader single"
                                    >
                                        {defaultFileList.length >= 1 ? null : <div>Chọn ảnh</div>}
                                    </Upload>
                                    {progress > 0 ? <Progress percent={progress}/> : null}
                                </Form.Item>
                                <Divider/>
                                <div className="text-right">
                                    <small className="text-danger mr-2">* thông tin bắt buộc</small>
                                    <Button htmlType={`submit`}>Lưu</Button>
                                </div>
                            </Form>
                        </Card>
                    </Col>
                </Row>
            )
        }
    </script>
@stop
