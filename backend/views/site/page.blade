@section('js_pos')
    <script type="text/babel">


        const App = () => {
            const initalState = {
                categories: [],
                loading: false,

            }
            const [state, setState] = useState(initalState);
            const [defaultFileList, setDefaultFileList] = useState([]);
            const [progress, setProgress] = useState(0);
            const [form] = Form.useForm();
            const onSubmit = async (article) => {
                setState({
                    ...state,
                    loading: true
                });
                let res = true;
                if (typeof article.id === "undefined") {
                    res = await Pages.create(article);
                    message.success('Thêm bài viết thành công!');
                } else {
                    res = await Pages.update(article);
                    message.success('Cập nhật bài viết thành công!');
                }
                if (res) {
                    updateState();
                }
            }
            const updateState = () => {
                window.location.href = URLS.PAGE.INDEX;
            }
            const handleOnChange = ({file, fileList, event}) => {
                setDefaultFileList(fileList);
            };
            const onUpload = options => {
                const {onSuccess, onError, file, onProgress} = options;
                setState({
                    ...state,
                    uploading: true
                });
                onUploadMedia(file, data => {
                    form.setFieldsValue({
                        media_id: data.id
                    });
                    onSuccess();
                }, onError, (event) => {
                    const percent = Math.floor((event.loaded / event.total) * 100);
                    setProgress(percent);
                    if (percent === 100) {
                        setTimeout(() => setProgress(0), 1000);
                    }
                    onProgress({percent: (event.loaded / event.total) * 100});
                }, MEDIA_TYPE_BLOG);
            }
            const onChangeSlug = (e) => {
                form.setFieldsValue({
                    slug: toSlug(e.target.value)
                })
            }
            const handleChangeContent = text => {
                form.setFieldsValue({
                    content: text
                })
            }
            useEffect(async () => {
                const id = getParams('id');

                if (id) {
                    const {data} = await Pages.view(id);

                    data.avatar ? setDefaultFileList([{
                        uid: data.id,
                        name: data.name,
                        status: 'done',
                        url: data.avatar
                    }]) : setDefaultFileList([]);
                    form.setFieldsValue(data);
                }

                setState({
                    ...state,
                });
                initTinymce(handleChangeContent)

            }, []);

            return (
                <div className="mb-5">
                    <Button type="dashed" className="mb-2"><a href="/site/page">
                        <i className="icon icon-arrow-left"/> Danh sách bài viết</a>
                    </Button>
                    <Form onFinish={onSubmit} form={form} layout="vertical">
                        <Row gutter={[8, 0]}>
                            <Col md={18} xs={24}>
                                <Card bordered={false}>

                                    <Form.Item name={`id`} hidden>
                                        <Input/>
                                    </Form.Item>
                                    <Form.Item
                                        onChange={onChangeSlug}
                                        label={`Tên bài viết`}
                                        name={`name`}
                                        rules={[{required: true, message: 'Tên bài viết bắt buộc!'}]}
                                    >
                                        <Input/>
                                    </Form.Item>
                                    <Form.Item
                                        label={`Slug`}
                                        name={`slug`}
                                        rules={[{required: true, message: 'Slug bắt buộc!'}]}
                                    >
                                        <Input/>
                                    </Form.Item>
                                    <Form.Item
                                        label="Mô tả ngắn"
                                        name={`excerpt`}
                                    >
                                        <Input.TextArea/>
                                    </Form.Item>
                                    <Form.Item
                                        onChange={handleChangeContent}
                                        label="Nội dung bài viết"
                                        rules={[{required: true, message: 'Nội dung bắt buộc!'}]}
                                        name={`content`}>
                                        <Input.TextArea className="editor"/>
                                    </Form.Item>
                                </Card>
                            </Col>
                            <Col md={6} xs={24}>
                                <div className={`sticky-sidebar`}>
                                    <Card title="Thiết lập"
                                          extra={<Button htmlType="submit" type="primary"
                                                         size="small">Lưu</Button>}>
                                        <Form.Item
                                            name={`status`}
                                            label="Trạng thái"
                                            initialValue={`public`}
                                        >
                                            <Select>
                                                <Select.Option value={'public'}>Công khai</Select.Option>
                                                <Select.Option value={`draft`}>Nháp</Select.Option>
                                            </Select>
                                        </Form.Item>

                                        <small>* Upload ảnh phải đặt tên không kí tự đặc biệt</small>
                                        <small className="text-danger">*Tối ưu hình ảnh qua <a
                                            href="https://tinypng.com" target="_blank">tinypng.com</a></small><br/>
                                        <small className="text-danger">* Ảnh, media không quá 2MB</small>
                                        <small className="text-danger">Kích thước ảnh 1000 x 667px</small>
                                        <Form.Item
                                            name="avatar"
                                            label="Ảnh"
                                        >
                                            <Upload
                                                accept="image/*"
                                                customRequest={onUpload}
                                                onChange={handleOnChange}
                                                listType="picture"
                                                onRemove={() =>
                                                    onRemoveMedia(form.getFieldValue('media_id'))
                                                }
                                                fileList={defaultFileList}
                                                className="avatar-uploader single"
                                            >
                                                {defaultFileList.length >= 1 ? null :
                                                    <Button><i className="icon-upload mr-2"/> Chọn ảnh</Button>}
                                            </Upload>
                                            {progress > 0 ? <Progress percent={progress}/> : null}
                                        </Form.Item>
                                        <Form.Item name={`media_id`}
                                                   rules={[{required: true, message: 'avatar bắt buộc'}]}
                                                   hidden>
                                            <Input/>
                                        </Form.Item>
                                    </Card>
                                </div>
                            </Col>
                        </Row>
                    </Form>
                </div>
            )
        }
    </script>
@stop
