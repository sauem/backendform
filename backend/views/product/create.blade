@section('js_pos')
    <?= $view->render('variants.blade')?>
    <script type="text/babel">

        const initalState = {
            categories: [],
            attributes: [],
            loading: false,
            language: LANG_VI,
            variantVisible: false,
            variants: null
        }
        const App = () => {
            const [state, setState] = useState(initalState);
            const [checkedKeys, setCheckedKeys] = useState([]);
            const [products, setProducts] = useState([]);
            const [cats, setCats] = useState([]);
            const [transfers, setTransfers] = useState([])
            const [defaultKey, setDefaultKey] = useState(null);
            const [form] = Form.useForm();
            const [defaultFileList, setDefaultFileList] = useState([]);
            const [defaultThumbList, setDefaultThumbList] = useState([]);
            const [attr, setAttr] = useState({});
            const [progress, setProgress] = useState(0);
            const onSubmit = async (data) => {
                if (typeof data.id == "undefined") {
                    await Products.create(data);
                } else {
                    await Products.update(data);
                }
            }
            const changeContent = text => {
                form.setFieldsValue({
                    content: text
                });
            }
            const slugChange = (e) => {
                form.setFieldsValue({
                    slug: toSlug(e.target.value)
                });
            }
            const getProducts = async (params = {}) => {
                const {data} = await Products.fetch(params);
                if (data.length > 0) {
                    const pList = data.map(item => {
                        return {
                            key: item.id,
                            title: item.name
                        }
                    });
                    setProducts(pList);
                }
            }
            useEffect(async () => {

                initTinymce(changeContent);
                const id = getParams('id');

                if (id) {
                    const {data} = await Products.view(id);
                    await setLanguage(data.language);

                    const {meta, media_id, archives} = data;

                    let cats = archives.map(item => {
                        return item.archive_id;
                    });
                    setCheckedKeys(cats);

                    form.setFieldsValue({
                        ...data,
                        media_id: media_id,
                        archive_id: cats,
                        meta_title: meta ? meta.meta_title : null,
                        meta_keyword: meta ? meta.meta_keyword : null,
                        meta_description: meta ? meta.meta_description : null
                    });

                    data.avatar ? setDefaultFileList([{
                        uid: data.id,
                        name: data.name,
                        status: 'done',
                        url: data.avatar
                    }]) : setDefaultFileList([]);

                    if (data.thumbs.length > 0) {
                        const newThumbs = [];
                        data.thumbs.map(item => {
                            newThumbs.push({
                                uid: item.id,
                                name: `thumb-${item.id}`,
                                status: 'done',
                                url: `/static/${item.path}`
                            })
                        });
                        setDefaultThumbList(newThumbs);
                    }
                } else {
                    await setLanguage(LANG_VI);
                }
                await getProducts();
                const attr = await Attributes.fetch({page: -1});
                setState({
                    ...state,
                    attributes: attr.data
                });

            }, []);
            const setLanguage = async (e) => {
                const res = await fetchArchive({language: e});
                form.setFieldsValue({
                    default_archive: null
                });
                setCats(convertTreeSelect(res.data));
                setState({
                    ...state,
                    language: e,
                });

            }
            const handleOnChange = ({file, fileList, event}) => {
                setDefaultFileList(fileList);
            };
            const fetchArchive = async (params = {}) => {
                return await Archives.fetch({
                    page: -1,
                    "per-page": 99,
                    type: ARCHIVE_TYPE_PRODUCT,
                    ...params
                });
            }
            const onUpload = (options, type = 'avatar') => {
                const {onSuccess, onError, file, onProgress} = options;
                setState({
                    ...state,
                    ...{
                        uploading: true
                    }
                });
                onUploadMedia(file, data => {
                    let thumbnails = typeof form.getFieldValue('thumbnails') == "undefined" ? [] : form.getFieldValue('thumbnails');
                    if (type === 'thumbnails') {
                        thumbnails.push(data.id);
                        form.setFieldsValue({
                            thumbnails: thumbnails
                        });
                    } else {
                        form.setFieldsValue({
                            media_id: data.id
                        });
                    }

                    onSuccess();
                }, onError, (event) => {
                    const percent = Math.floor((event.loaded / event.total) * 100);
                    setProgress(percent);
                    if (percent === 100) {
                        setTimeout(() => setProgress(0), 1000);
                    }
                    onProgress({percent: (event.loaded / event.total) * 100});
                }, MEDIA_TYPE_PRODUCT);
            }
            const onSelectArchive = (selectKey) => {
                form.setFieldsValue({
                    default_archive: selectKey[0]
                })
            };
            const onCheckArchive = (checkedKeysValue, info) => {
                setCheckedKeys(checkedKeysValue);
                form.setFieldsValue({
                    archive_id: checkedKeysValue
                });
            }
            const addVariant = () => {
                setState({
                    ...state,
                    variantVisible: true,
                    variants: form.getFieldValue('attrs')
                })
            }
            const setVariant = (index, slug) => {
                const attrs = state.attributes;
                const obj = attrs.find(item => item.slug === slug);
                setAttr({
                    ...attr,
                    [index]: obj.variants
                });
            }
            const renderFooter = () => (
                <Button size="small" onClick={() => {
                }}>
                    reload
                </Button>
            );
            const handleChange = targetKeys => {
                setTransfers(targetKeys);
                form.setFieldsValue({
                    relations: targetKeys
                })
            };

            const renderRelation = () => {
                return (
                    <Transfer
                        dataSource={products}
                        showSearch
                        operations={['to right', 'to left']}
                        targetKeys={transfers}
                        onChange={handleChange}
                        render={item => item.title}
                        footer={renderFooter}
                    />
                )
            }
            return (
                <div className="mb-5">
                    <Form onFinish={onSubmit} form={form} layout="vertical">
                        <Row gutter={[8, 0]}>
                            <Col md={18}>
                                <Card title="Chi tiết">
                                    <Form.Item
                                        hidden
                                        name={`id`}
                                    >
                                        <Input/>
                                    </Form.Item>
                                    <Form.Item
                                        onChange={slugChange}
                                        label="Tên sản phẩm"
                                        name={`name`}
                                        rules={[{required: true, message: 'Tên sản phẩm bắt buộc!'}]}
                                    >
                                        <Input/>
                                    </Form.Item>

                                    <Form.Item
                                        label="Slug"
                                        name={`slug`}
                                        rules={[{required: true, message: 'Slug bắt buộc!'}]}
                                    >
                                        <Input disabled/>
                                    </Form.Item>
                                    <Form.Item
                                        label="Mô tả"
                                        name={`excerpt`}
                                    >
                                        <Input.TextArea/>
                                    </Form.Item>

                                    <Form.Item
                                        label="Nội dung sản phẩm"
                                        name="content">
                                        <Input.TextArea className={`editor`}/>
                                    </Form.Item>
                                    <Row gutter={[8, 0]}>
                                        <Col xs={24} md={6}>
                                            <Form.Item
                                                label="Mã sản phẩm"
                                                name={`sku`}
                                            >
                                                <Input/>
                                            </Form.Item>
                                        </Col>
                                        <Col xs={24} md={6}>
                                            <Form.Item
                                                initialValue={0}
                                                label="Giá bán"
                                                name={`default_price`}
                                            >
                                                <InputNumber
                                                    style={getSize('100%')}
                                                    formatter={value => `đ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                                                    parser={value => value.replace(/\đ\s?|(,*)/g, '')}
                                                />
                                            </Form.Item>
                                        </Col>
                                        <Col xs={24} md={6}>
                                            <Form.Item
                                                initialValue={0}
                                                label="Giá giảm"
                                                name={`default_sale_price`}
                                            >
                                                <InputNumber
                                                    style={getSize('100%')}
                                                    formatter={value => `đ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                                                    parser={value => value.replace(/\đ\s?|(,*)/g, '')}
                                                />
                                            </Form.Item>
                                        </Col>
                                    </Row>
                                </Card>
                                <div className="my-5">
                                    <Card title={
                                        <div className="d-flex justify-content-between">
                                            <p>Thuộc tính sản phẩm</p>
                                            <Button onClick={addVariant} type="dashed" danger>
                                                Thêm biến thể
                                            </Button>
                                        </div>
                                    }>
                                        <Row>
                                            <Col xs={24}>
                                                <Form.List name="attrs">
                                                    {(fields, {add, remove}) => {
                                                        return (
                                                            <div>
                                                                {fields.map((field, index) => (

                                                                    <Row gutter={[8, 0]}>
                                                                        <Col md={6}>
                                                                            <Form.Item
                                                                                {...field}
                                                                                name={[field.name, 'attr']}
                                                                                fieldKey={[field.fieldKey, 'name']}
                                                                                rules={[{
                                                                                    required: true,
                                                                                    message: 'Missing attr'
                                                                                }]}
                                                                            >
                                                                                <Select
                                                                                    onChange={attr => setVariant(index, attr)}
                                                                                    className={`w-100`}
                                                                                    allowClear
                                                                                    placeholder="Chọn thuộc tính">
                                                                                    {state.attributes ? state.attributes.map(item => {
                                                                                        return <Select.Option
                                                                                            value={item.slug}>{item.name}</Select.Option>
                                                                                    }) : null}
                                                                                </Select>
                                                                            </Form.Item>

                                                                        </Col>
                                                                        <Col md={14}>
                                                                            <Form.Item
                                                                                {...field}
                                                                                name={[field.name, 'variant']}
                                                                                fieldKey={[field.fieldKey, 'variant']}
                                                                                rules={[{
                                                                                    required: true,
                                                                                    message: 'Missing variant'
                                                                                }]}
                                                                            >
                                                                                <Select mode="multiple"
                                                                                        allowClear
                                                                                        placeholder="Chọn biến thể">
                                                                                    {attr[index] ? attr[index].map(item => {
                                                                                        return <Select.Option
                                                                                            value={item.slug}>{item.name}</Select.Option>
                                                                                    }) : null}
                                                                                </Select>
                                                                            </Form.Item>
                                                                        </Col>
                                                                        <Col>
                                                                            <Button onClick={() => remove(field.name)}>
                                                                                <i className="icon-trash"/>
                                                                            </Button>
                                                                        </Col>
                                                                    </Row>
                                                                ))}
                                                                <Button type="dashed" onClick={() => add()} block>
                                                                    Thêm thuộc tính khác
                                                                </Button>
                                                            </div>
                                                        )
                                                    }}
                                                </Form.List>
                                            </Col>
                                            <Col xs={24}>

                                            </Col>
                                        </Row>
                                    </Card>
                                </div>
                                <Card title="Sản phẩm liên quan">
                                    <Form.Item hidden name="relations">
                                    </Form.Item>
                                    {renderRelation()}
                                </Card>
                                <Card title="SEO Meta">
                                    <Form.Item
                                        label="Meta title"
                                        name={`meta_tile`}
                                    >
                                        <Input/>
                                    </Form.Item>
                                    <Form.Item
                                        label="Meta keywords"
                                        name={`meta_keyword`}
                                    >
                                        <Input/>
                                    </Form.Item>
                                    <Form.Item
                                        label="Meta description"
                                        name={`meta_description`}
                                    >
                                        <Input.TextArea/>
                                    </Form.Item>
                                </Card>
                            </Col>
                            <Col md={6}>
                                <div className="sticky-top">
                                    <Card title="Danh mục"
                                          extra={<Button type="primary" size="small" htmlType="submit">Lưu</Button>}>
                                        <small>* Nhấn tên danh mục để chọn mặc định</small>
                                        <br/>
                                        <small>* Check box chọn danh mục</small>
                                        <hr/>
                                        <Form.Item
                                            name="archive_id"
                                            multiple
                                            rules={[{required: true, message: 'Danh mục bắt buộc', type: 'array'}]}
                                        >
                                            <Tree
                                                checkable
                                                expandedKeys={checkedKeys}
                                                checkedKeys={checkedKeys}
                                                defaultSelectedKeys={defaultKey}
                                                onCheck={onCheckArchive}
                                                onSelect={onSelectArchive}
                                                treeData={cats}
                                            />
                                        </Form.Item>
                                        <Form.Item
                                            hidden
                                            rules={[{required: true, message: 'chọn danh mục mặc định'}]}
                                            name={`default_archive`}
                                        >
                                            <Input/>
                                        </Form.Item>
                                    </Card>
                                    <Card title="Thiết lập">
                                        <Form.Item
                                            name={`status`}
                                            rules={[{required: true, message: 'Trangj thái bắt buộc'}]}
                                            initialValue='public'
                                            label="Trạng thái"
                                        >
                                            <Select>
                                                <Select.Option value={`public`}>Công khai</Select.Option>
                                                <Select.Option value={`draft`}>Nháp</Select.Option>
                                            </Select>
                                        </Form.Item>
                                        <Form.Item
                                            name="language"
                                            initialValue={LANG_VI}
                                            label="Ngôn ngữ"
                                            rules={[{required: true, message: 'Hãy chọn ngôn ngữ!'}]}
                                        >
                                            <Select onChange={setLanguage}>
                                                <Select.Option value={LANG_VI}>Tiếng Việt</Select.Option>
                                                <Select.Option value={LANG_EN}>Tiếng Anh</Select.Option>
                                            </Select>
                                        </Form.Item>
                                        <Form.Item
                                            name={`avatar`}
                                            label="Ảnh đại diện"
                                            rules={[{required: true, message: 'Ảnh đại diện bắt buộc!'}]}
                                        >
                                            <Upload
                                                accept="image/*"
                                                customRequest={onUpload}
                                                onChange={handleOnChange}
                                                listType="picture"
                                                onRemove={(file) =>
                                                    onRemoveMedia(file.uid)
                                                }
                                                fileList={defaultFileList}
                                                className="avatar-uploader single"
                                            >
                                                {defaultFileList.length >= 1 ? null :
                                                    <Button><i className="icon-upload mr-2"/> Chọn ảnh</Button>}
                                            </Upload>
                                        </Form.Item>
                                        <Form.Item
                                            name="media_id"
                                            hidden>
                                            <Input/>
                                        </Form.Item>
                                        <Form.Item
                                            name="thumbnails"
                                            rules={[{type: 'array'}]}
                                            hidden>
                                            <Input/>
                                        </Form.Item>
                                        <Form.Item
                                            label="Ảnh thumbnail (max 5)"
                                        >
                                            <Upload
                                                accept="image/*"
                                                listType="picture"
                                                maxCount={6}
                                                onRemove={(file) => {
                                                    onRemoveMedia(file.uid);
                                                    message.success('Xóa thành công!');
                                                    setDefaultThumbList(defaultThumbList.filter(thumb => thumb.uid !== file.uid))
                                                }
                                                }
                                                fileList={defaultThumbList}
                                                customRequest={options => onUpload(options, 'thumbnails')}
                                                multiple
                                            >
                                                <Button><i className="icon-upload mr-2"/> Chọn ảnh</Button>
                                            </Upload>
                                        </Form.Item>
                                    </Card>
                                </div>
                            </Col>
                        </Row>
                        <VariantDrawer
                            form={form}
                            variants={state.variants}
                            onClose={() => setState({...state, variantVisible: false})}
                            visible={state.variantVisible}/>
                    </Form>
                </div>
            )
        }
    </script>
@stop
