<?php
$view->title = 'Danh mục sản phẩm';
?>
@section('js_pos')
    <script type="text/babel">


        const App = () => {
            const initialState = {
                modalTitle: '',
                modalVisible: false,
                categories: [],
                pagination: {},
                uploading: false,
                loading: false,
                searchValue: ''
            }
            const [state, setState] = useState(initialState);
            const [defaultFileList, setDefaultFileList] = useState({
                avatar: [],
                banner: []
            });
            const [progress, setProgress] = useState(0);
            const [form] = Form.useForm();
            const onSubmit = async (data) => {
                if (typeof data.id !== "undefined") {
                    await Archives.update(data);
                    message.success('Cập nhật thành công!');
                } else {
                    await Archives.create(data);
                }
                await updateState({loading: false});
                form.resetFields();
            }
            const onUpdate = async (archive) => {
                form.setFieldsValue(archive);
                archive.avatar && setDefaultFileList({
                    ...defaultFileList,
                    avatar: [{
                        uid: archive.media.id,
                        name: archive.name,
                        status: 'done',
                        url: archive.avatar
                    }],
                });
                archive.banner && setDefaultFileList({
                    ...defaultFileList,
                    banner: [{
                        uid: archive.banner_id,
                        name: `banner_${archive.name}`,
                        status: 'done',
                        url: archive.banner
                    }]
                })

            }
            const onUpload = (options, filed = 'media_id') => {
                const {onSuccess, onError, file, onProgress} = options;
                setState({
                    ...state,
                    ...{
                        uploading: true
                    }
                });
                onUploadMedia(file, data => {
                    form.setFieldsValue({
                        [filed]: data.id
                    });
                    onSuccess();
                }, onError, (event) => {
                    const percent = Math.floor((event.loaded / event.total) * 100);
                    setProgress(percent);
                    if (percent === 100) {
                        setTimeout(() => setProgress(0), 1000);
                    }
                    onProgress({percent: (event.loaded / event.total) * 100});
                });
            }
            const handleOnChange = (listName, {file, fileList, event}) => {

                setDefaultFileList({
                    ...defaultFileList,
                    [listName]: fileList
                });
            };
            const handleSlug = evt => {
                form.setFieldsValue({
                    slug: toSlug(evt.target.value)
                })
            }
            const changePage = async ({current}) => {
                await updateState({}, current);
            }
            const updateState = async (obj = {}, page = 1) => {
                setState({
                    ...state,
                    loading: true
                });
                const {pagination, data} = await Archives.fetch(
                    {
                        page,
                        type: ARCHIVE_TYPE_PRODUCT,
                        ...obj
                    }
                );
                setState({
                    ...state,
                    ...obj,
                    categories: data,
                    pagination: pagination,
                    loading: false,
                });
            }
            const onDelete = async (id) => {
                Archives.delete(id).then(() => updateState());
            }
            const setSearchValue = e => {
                setState({
                    ...state,
                    ...{
                        searchValue: e.target.value
                    }
                })
            }
            const searchArchive = async () => {
                await updateState({
                    name: state.searchValue
                });
            }
            useEffect(async () => {
                await updateState();

            }, []);

            return (
                <Row gutter={[8, 0]}>
                    <Col md={8}>
                        <Card title="Thêm danh mục">
                            <Form layout={`vertical`} onFinish={onSubmit} form={form} id={'categoryForm'}>
                                <Form.Item name={'type'} initialValue={ARCHIVE_TYPE_PRODUCT} hidden><Input/></Form.Item>
                                <Form.Item name={'id'} hidden><Input/></Form.Item>
                                <Form.Item name={'media_id'} hidden><Input/></Form.Item>
                                <Form.Item name={'banner_id'} hidden><Input/></Form.Item>
                                <Form.Item
                                    name={'name'}
                                    label={`Tên danh mục`}
                                    onChange={handleSlug}
                                    rules={[{required: true, message: 'Danh mục bắt buộc!'}]}
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item
                                    name={'slug'}
                                    label={`Slug`}
                                    defaultValue={`HELLLO`}
                                    rules={[{required: true, message: 'Slug bắt buộc!'}]}
                                >
                                    <Input disabled/>
                                </Form.Item>
                                <Form.Item
                                    name={'parent_id'}
                                    label={`Danh mục cha`}
                                >
                                    <Select>
                                        {state.categories ? state.categories.map(item => {
                                            return (
                                                <Select.Option value={item.id}>{item.name}</Select.Option>
                                            )
                                        }) : null}
                                    </Select>
                                </Form.Item>
                                <Row gutter={[8, 0]}>
                                    <Col md={12}>
                                        <Form.Item
                                            name={'icon'}
                                            label={`Icon`}
                                        >
                                            <Select>
                                                {janamiIcons && janamiIcons.map(item => {
                                                    return (
                                                        <Select.Option value={item.key}>
                                                            <img width="24" src={item.icon}/>
                                                            <span className="ml-1"> {item.title}</span>
                                                        </Select.Option>
                                                    )
                                                })}
                                            </Select>
                                        </Form.Item>
                                    </Col>
                                    <Col md={12}>
                                        <Form.Item
                                            initialValue={0}
                                            name={'show_home'}
                                            label={`Hiển thị trang chủ`}
                                        >
                                            <Select>
                                                <Select.Option value={0}>Ẩn</Select.Option>
                                                <Select.Option value={1}>Hiển thị</Select.Option>
                                            </Select>
                                        </Form.Item>
                                    </Col>
                                </Row>
                                <Row gutter={[8, 0]}>
                                    <Col md={12}>
                                        <Form.Item
                                            initialValue={1}
                                            name={'active'}
                                            label={`Trạng thái`}
                                        >
                                            <Select>
                                                <Select.Option value={1}>Kích hoạt</Select.Option>
                                                <Select.Option value={0}>Ẩn</Select.Option>
                                            </Select>
                                        </Form.Item>

                                    </Col>
                                    <Col md={12}>
                                        <Form.Item
                                            initialValue={LANG_VI}
                                            name={'language'}
                                            label={`Ngôn ngữ`}
                                        >
                                            <Select>
                                                {LANGUAGES.map(item => {
                                                    return <Select.Option value={item.lang}>{item.name}</Select.Option>;
                                                })}
                                            </Select>
                                        </Form.Item>
                                    </Col>
                                </Row>
                                <Form.Item
                                    initialValue={`layout_1`}
                                    name={'layout'}
                                    label={`Giao diện`}
                                >
                                    <Select>
                                        <Select.Option value={'layout_1'}>1 cột</Select.Option>
                                        <Select.Option value={'layout_2'}>2 cột</Select.Option>
                                    </Select>
                                </Form.Item>
                                <Form.Item
                                    name={'sub_title'}
                                    label={`Tiêu đề phụ`}
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item
                                    name={'sub_text'}
                                    label={`Tiêu đề mô tả`}
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item
                                    name={'description'}
                                    label={`Ghi chú`}
                                >
                                    <Input.TextArea/>
                                </Form.Item>
                                <Form.Item label="Ảnh đại diện">

                                    <Upload
                                        accept="image/*"
                                        customRequest={opts => onUpload(opts, 'media_id')}
                                        onChange={opts => handleOnChange('avatar', opts)}
                                        onRemove={(file) =>
                                            onRemoveMedia(form.getFieldValue('media_id'))
                                        }
                                        listType="picture"
                                        className="avatar-uploader single"
                                        fileList={defaultFileList.avatar}
                                    >
                                        {defaultFileList.avatar.length >= 1 ? null :
                                            <Button><i className="icon-upload mr-2"/> Chọn ảnh</Button>}
                                    </Upload>
                                    {progress > 0 ? <Progress percent={progress}/> : null}
                                </Form.Item>
                                <Form.Item label="Ảnh banner">

                                    <Upload
                                        accept="image/*"
                                        customRequest={opts => onUpload(opts, 'banner_id')}
                                        onChange={opts => handleOnChange('banner', opts)}
                                        onRemove={(file) => {
                                            onRemoveMedia(form.getFieldValue('banner_id'))
                                        }
                                        }
                                        listType="picture"
                                        className="avatar-uploader single"
                                        fileList={defaultFileList.banner}
                                    >
                                        {defaultFileList.banner.length >= 1 ? null :
                                            <Button><i className="icon-upload mr-2"/> Chọn ảnh</Button>}
                                    </Upload>
                                    {progress > 0 ? <Progress percent={progress}/> : null}
                                </Form.Item>
                                <Divider/>
                                <div className="text-right">
                                    <small className="text-danger mr-2">* thông tin bắt buộc</small>
                                    <Button htmlType={`submit`}>Lưu</Button>
                                </div>
                            </Form>
                        </Card>
                    </Col>
                    <Col md={16}>
                        <Card title={`Danh mục sản phẩm`}
                              extra={
                                  <div className="d-flex">
                                      <Select defaultValue={LANG_VI} style={getStyles({width: '100%', marginRight: 5})}>
                                          <Select.Option value={LANG_VI}>Tiếng Việt</Select.Option>
                                          <Select.Option value={LANG_EN}>Tiếng Anh</Select.Option>
                                      </Select>
                                      <Input onChange={setSearchValue} placeholder="Tìm kiếm tên....." name="s"/>
                                      <Button onClick={searchArchive} className="ml-2"><i
                                          className="icon-search"/></Button>
                                  </div>
                              }
                        >
                            <Spin tip="Loading..." spinning={state.loading}>
                                <Table
                                    size={`small`}
                                    dataSource={state.categories}
                                    pagination={state.pagination}
                                    onChange={changePage}
                                    columns={[
                                        {title: 'Tên danh mục', dataIndex: 'name', key: 'name'},
                                        {
                                            title: 'Trạng thái',
                                            dataIndex: 'active', key: 'active',
                                            render: status => <span
                                                className={`badge badge-pill badge-sm badge-${status == 1 ? 'success' : 'secondary'}`}>
                                                {status == 1 ? 'Kích hoạt' : 'Ản'} </span>
                                        },
                                        {
                                            title: '', dataIndex: 'action', key: 'action', render: (text, raw) => {
                                                return (
                                                    <div>
                                                        <Button onClick={() => onUpdate(raw)} type="primary"
                                                                className={`mr-1`} size={`small`}><i
                                                            className="icon icon-edit"/></Button>
                                                        <Popconfirm
                                                            title="Xóa danh mục hiện tại"
                                                            onConfirm={() => onDelete(raw.id)}
                                                            okText="Xóa"
                                                            cancelText="Hủy"
                                                        >
                                                            <Button type="dashed" danger size={`small`}><i
                                                                className="icon icon-trash"/></Button>
                                                        </Popconfirm>
                                                    </div>
                                                )
                                            }
                                        },
                                    ]}
                                />
                            </Spin>
                        </Card>
                    </Col>
                </Row>
            )
        }
    </script>
@stop
